package app;

import lejos.hardware.Button;
import lejos.hardware.port.*;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.robotics.SampleProvider;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;


public class LineFollow implements Runnable {

  static float lastReading = 0;
  static float distance = 0;
  static long startTime = System.currentTimeMillis();

public LineFollow() {
	// TODO Auto-generated constructor stub
}

//  private static void sendMileage(float mileage, long duration) {
  private static void sendMileage(float mileage, long duration) {
      HttpURLConnection conn = null;

      try {
          URL url = new URL("http://192.168.0.17:8080/rest/motor/mileage/"+ mileage + "/" + duration);
          conn = (HttpURLConnection)url.openConnection();
          conn.setDoOutput(true);  
          int responseCode = conn.getResponseCode();
          System.out.println("Response Code: " + responseCode);
      } catch (IOException e) {
          System.out.println("Error sending mileage data: " + e.getMessage());
      }
  }


  EV3ColorSensor colorSensor = new EV3ColorSensor(SensorPort.S3);
  SampleProvider colorProvider = colorSensor.getRedMode();
  float[] sample = new float[colorProvider.sampleSize()];

  @Override
  public void run() {
    while (true) {
      colorProvider.fetchSample(sample, 0);
      float redValue = sample[0];
      if (redValue < 0.2) {
    	  Motors.run1();
      } else {
        Motors.run2();
      }
      if (Button.DOWN.isDown()) {
    	  int NewSpeed = Motors.getSpeed();
          // Calculate distance and duration
//          float currentReading = motorA.getPosition();
//          float distanceTraveled = (currentReading - lastReading) / 360;
          long duration = System.currentTimeMillis() - startTime;

          // Send mileage data
          sendMileage(100, duration);

          // Update lastReading and startTime
//          lastReading = currentReading;
          startTime = System.currentTimeMillis();
      }
    	
      }
    }
  }
